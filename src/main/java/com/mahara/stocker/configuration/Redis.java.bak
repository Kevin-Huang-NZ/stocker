package com.mahara.stocker.configuration;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.support.spring.FastJsonRedisSerializer;
import com.mahara.stocker.error.IgnoreExceptionCacheErrorHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.cache.annotation.CachingConfigurerSupport;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.interceptor.CacheErrorHandler;
import org.springframework.cache.interceptor.KeyGenerator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import java.lang.reflect.Method;

@Configuration
@EnableCaching
public class Redis extends CachingConfigurerSupport {
  @Autowired private JedisConnectionFactory jedisConnectionFactory;

  //	@Bean
  //	@Override
  //	public CacheManager cacheManager() {
  //		// 默认配置， 默认超时时间为30s
  //		RedisCacheConfiguration defaultCacheConfig = RedisCacheConfiguration.defaultCacheConfig()
  //				.entryTtl(Duration.ofSeconds(30L)).disableCachingNullValues();
  //
  //		// 配置dmt-app的超时时间为120s
  //		RedisCacheManager cacheManager = RedisCacheManager
  //
  //	.builder(RedisCacheWriter.lockingRedisCacheWriter(jedisConnectionFactory)).cacheDefaults(defaultCacheConfig)
  //				.withInitialCacheConfigurations(singletonMap("dmt-app",
  // RedisCacheConfiguration.defaultCacheConfig()
  //						.entryTtl(Duration.ofSeconds(120L)).disableCachingNullValues()))
  //				.transactionAware().build();
  //
  //		return cacheManager;
  //	}

  /**
   * 自定义缓存key的生成策略。默认的生成策略是看不懂的(乱码内容) 通过Spring 的依赖注入特性进行自定义的配置注入并且此类是一个配置类可以更多程度的自定义配置
   *
   * @return
   */
  @Bean
  @Override
  public KeyGenerator keyGenerator() {
    return new KeyGenerator() {
      @Override
      public Object generate(Object target, Method method, Object... params) {
        StringBuilder sb = new StringBuilder();
        sb.append(target.getClass().getName());
        sb.append(".");
        sb.append(method.getName());
        sb.append("#");
        for (Object obj : params) {
          sb.append(JSON.toJSONString(obj));
        }
        return sb.toString();
      }
    };
  }

  /** 添加自定义缓存异常处理 当缓存读写异常时,忽略异常 */
  @Override
  public CacheErrorHandler errorHandler() {
    return new IgnoreExceptionCacheErrorHandler();
  }

  /** */
  @Bean
  @ConditionalOnMissingBean(name = "redisTemplate")
  public RedisTemplate<Object, Object> redisTemplate() {
    RedisTemplate<Object, Object> template = new RedisTemplate<>();
    template.setConnectionFactory(jedisConnectionFactory);
    // 使用fastjson序列化
    FastJsonRedisSerializer<Object> fastJsonRedisSerializer =
        new FastJsonRedisSerializer<>(Object.class);
    // 全局开启AutoType，不建议使用
    ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
    // 建议使用这种方式，小范围指定白名单
    // ParserConfig.getGlobalInstance().addAccept("me.too.scaffold.core.model.");
    // value值的序列化采用fastJsonRedisSerializer
    template.setValueSerializer(fastJsonRedisSerializer);
    template.setHashValueSerializer(fastJsonRedisSerializer);
    // key的序列化采用StringRedisSerializer
    template.setKeySerializer(new StringRedisSerializer());
    template.setHashKeySerializer(new StringRedisSerializer());
    return template;
  }
}
