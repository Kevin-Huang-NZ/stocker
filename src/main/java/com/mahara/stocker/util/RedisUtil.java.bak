package com.mahara.stocker.util;

import com.alibaba.fastjson.JSON;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.data.redis.connection.RedisConnection;
import org.springframework.data.redis.core.RedisCallback;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.RedisSerializer;
import org.springframework.stereotype.Component;

@Component("redisUtil")
public class RedisUtil {

  @Autowired private RedisTemplate<String, String> redisTemplate;

  public <T> boolean set(String key, T value) {
    if (value == null) {
      return false;
    }
    return set(key, JSON.toJSONString(value), 60 * 60);
  }

  public <T> boolean set(String key, T value, long validTime) {
    if (value == null) {
      return false;
    }
    return set(key, JSON.toJSONString(value), validTime);
  }

  public boolean set(String key, String value, long validTime) {
    boolean result =
        redisTemplate.execute(
            new RedisCallback<Boolean>() {
              @Override
              public Boolean doInRedis(RedisConnection connection) throws DataAccessException {
                RedisSerializer<String> serializer = redisTemplate.getStringSerializer();
                connection.set(serializer.serialize(key), serializer.serialize(value));
                connection.expire(serializer.serialize(key), validTime);
                return true;
              }
            });
    return result;
  }

  public <T> T get(String key, Class<T> clazz) {
    String cachedJson = get(key);
    if (cachedJson == null) {
      return null;
    }
    return JSON.parseObject(cachedJson, clazz);
  }

  public String get(String key) {
    String result =
        redisTemplate.execute(
            new RedisCallback<String>() {
              @Override
              public String doInRedis(RedisConnection connection) throws DataAccessException {
                RedisSerializer<String> serializer = redisTemplate.getStringSerializer();
                byte[] value = connection.get(serializer.serialize(key));
                return serializer.deserialize(value);
              }
            });
    return result;
  }

  public boolean del(String key) {
    return redisTemplate.delete(key);
  }
}
